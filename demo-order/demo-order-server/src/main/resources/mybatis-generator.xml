<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <properties resource="jdbc.properties"/>
    <context id="mysql_generator" targetRuntime="MyBatis3">
        <property name="autoDelimitKeywords" value="true"/>
        <!--可以使用``包括字段名，避免字段名与sql保留字冲突报错-->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 自动生成toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 自动生成equals方法和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>


        <!-- 非官方插件 https://github.com/itfsw/mybatis-generator-plugin -->
        <!-- 批量插入插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.BatchInsertPlugin"/>
        <!-- 查询单条数据插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.SelectOneByExamplePlugin"/>
        <!-- 查询结果选择性返回插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.SelectSelectivePlugin"/>
        <!-- Selective选择插入更新增强插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.SelectiveEnhancedPlugin"/>
        <!-- Example Criteria 增强插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ExampleEnhancedPlugin"/>
        <!-- 数据Model属性对应Column获取插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ModelColumnPlugin"/>
        <!-- 逻辑删除插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LogicalDeletePlugin">
            <!-- 这里配置的是全局逻辑删除列和逻辑删除值，当然在table中配置的值会覆盖该全局配置 -->
            <!-- 逻辑删除列类型只能为数字、字符串或者布尔类型 -->
            <property name="logicalDeleteColumn" value="deleted"/>
            <!-- 逻辑删除-已删除值 -->
            <property name="logicalDeleteValue" value="1"/>
            <!-- 逻辑删除-未删除值 -->
            <property name="logicalUnDeleteValue" value="0"/>
        </plugin>
        <!-- 表字段重命名配置插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.TableRenameConfigurationPlugin">
            <!-- 需要注意，这里的正则和官方一样是比对替换都是原始表的column名称 -->
            <property name="columnRenamingRule.searchString" value="^is"/>
            <property name="columnRenamingRule.replaceString" value=""/>
        </plugin>

        <!-- 存在即更新插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.UpsertPlugin">
            <!--
            支持upsertByExample，upsertByExampleSelective操作
            ！需开启allowMultiQueries=true多条sql提交操作，所以不建议使用！插件默认不开启
            -->
<!--            <property name="allowMultiQueries" value="true"/>-->
            <!--
            开启批量功能，支持batchUpsert,batchUpsertWithBLOBs,batchUpserSelective
            ！这几个方法中无法支持IncrementsPlugin的方法！插件默认不开启
            -->
            <property name="allowBatchUpsert" value="false"/>
        </plugin>

        <!-- MySQL分页插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LimitPlugin">
            <!-- 通过配置startPage影响Example中的page方法开始分页的页码，默认分页从0开始 -->
            <property name="startPage" value="0"/>
        </plugin>

        <!-- 注释相关设置 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否自动生成的注释, true: 是; false: 否 -->
            <property name="addRemarkComments" value="true"/>

        </commentGenerator>

        <!--数据库链接信息-->
        <jdbcConnection driverClass="${datasource.driverClassName}"
                        connectionURL="${datasource.url}"
                        userId="${datasource.username}"
                        password="${datasource.password}">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="useJSR310Types" value="true"/>
            <!-- 默认false, 把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer; 为 true 时把 JDBC DECIMAL 和 NUMERIC 类型解析为 java.math.BigDecimal -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- 生成的POJO类的位置. targetPackage为包名, targetProject为项目位置, 采用相对路径 -->
        <javaModelGenerator targetPackage="cn.demo.order.model.entity" targetProject="src/main/java">
            <!-- enableSubPackages: 是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="true"/>
        </javaModelGenerator>
        <!-- mapper映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>
        <!-- mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="cn.demo.order.mapper"
                             targetProject="src/main/java"/>

        <!-- 指定数据库表 需要生成哪个表，再打开注释 -->

        <!-- escapeWildcards 设置为 true 可以帮助抵御 SQL 注入 -->

        <table tableName="demo_order" domainObjectName="demoOrderEntity" delimitAllColumns="true"
               escapeWildcards="true"
               enableDeleteByExample="false" enableDeleteByPrimaryKey="false">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>